#include <stdio.h>
#include <stdint.h>
#include <stddef.h>
#include <string.h>

#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/semphr.h"
#include "freertos/queue.h"
#include "protocol_examples_common.h"
#include "nvs_flash.h"

#include "esp_wifi.h"
#include "esp_system.h"

#include "esp_event.h"
#include "esp_netif.h"

#include "lwip/sockets.h"
#include "lwip/dns.h"
#include "lwip/netdb.h"

#include <inttypes.h>
#include "sys/time.h"
#include "esp_log.h"
#include "mqtt_client.h"

#include <hd44780.h>
#include <rc522.h>

#include <cJSON.h>

#include "application.h"

char lcd_buffer[33] = "                                ";
SemaphoreHandle_t xSemLcd = 0;
SemaphoreHandle_t xSemRfid = 0;
SemaphoreHandle_t xSemClearLcd = 0;
static const char* TAG = "rc522-demo";
static rc522_handle_t scanner;

bool MQTT_CONNECTED = false;
bool scanRfidTag = false;
bool rfidId = false;
int tagSerialNumber = 0;

static hd44780_t lcd = {
        .write_cb = NULL,
        .font = HD44780_FONT_5X8,
        .lines = 2,
        .pins = {
            .rs = GPIO_NUM_16,
            .e  = GPIO_NUM_25,
            .d4 = GPIO_NUM_26,
            .d5 = GPIO_NUM_27,
            .d6 = GPIO_NUM_13,
            .d7 = GPIO_NUM_5,
            .bl = HD44780_NOT_USED
        }
    };


static void log_error_if_nonzero(const char *message, int error_code);

uint64_t get_timestamp()
{
	struct timeval tv;
	gettimeofday(&tv, NULL);
	return (tv.tv_sec * 1000LL + (tv.tv_usec / 1000LL));
}

void lcd_init(void)
{
  ESP_ERROR_CHECK(hd44780_init(&lcd));
  hd44780_gotoxy(&lcd, 0, 0);
  hd44780_puts(&lcd, lcd_buffer);
  hd44780_gotoxy(&lcd, 0, 0);
  // snprintf(lcd_buffer, 32, "LCD INIT");
  hd44780_puts(&lcd, lcd_buffer);
}

void lcd_task(void *arg)
{
  xSemLcd = xSemaphoreCreateBinary();
  xSemRfid = xSemaphoreCreateBinary();
  xSemClearLcd = xSemaphoreCreateBinary();
  while (1)
  {
    xSemaphoreTake(xSemLcd, portMAX_DELAY);
    if (scanRfidTag)
    {
        //hd44780_gotoxy(&lcd, 0, 0);
        //hd44780_puts(&lcd, "                ");
        hd44780_gotoxy(&lcd, 0, 0);
        snprintf(lcd_buffer, 32, "SCAN RFID TAG");
        hd44780_puts(&lcd, lcd_buffer);
        scanRfidTag = false;
        xSemaphoreGive(xSemRfid);
    }
    if(rfidId)
    {
        //hd44780_gotoxy(&lcd, 0, 1);
        //hd44780_puts(&lcd, "                ");
        hd44780_gotoxy(&lcd, 0, 1);
        hd44780_puts(&lcd, lcd_buffer);
        rfidId = false;
        xSemaphoreGive(xSemClearLcd);
    }
  }
}

void clear_lcd_task(void *arg)
{
    while(1)
    {
        xSemaphoreTake(xSemClearLcd, portMAX_DELAY);
        vTaskDelay(pdMS_TO_TICKS(3000));
        hd44780_gotoxy(&lcd, 0, 0);
        hd44780_puts(&lcd, "                ");
        hd44780_gotoxy(&lcd, 0, 1);
        hd44780_puts(&lcd, "                ");
    }
}

static void rc522_handler(void* arg, esp_event_base_t base, int32_t event_id, void* event_data)
{
    rc522_event_data_t* data = (rc522_event_data_t*) event_data;
    switch(event_id) {
        case RC522_EVENT_TAG_SCANNED:
        {
                xSemaphoreTake(xSemRfid, portMAX_DELAY);
                rc522_tag_t* tag = (rc522_tag_t*) data->ptr;
                ESP_LOGI(TAG, "Tag scanned (sn: %" PRIu64 ")", tag->serial_number);
                tagSerialNumber = tag->serial_number;
                if(tag->serial_number == 1069987537346)
                {
                  snprintf(lcd_buffer, 16, "069987537346");
                }
                else if(tag->serial_number == 374130170611)
                {
                  snprintf(lcd_buffer, 16, "74130170611");
                }
                else if(tag->serial_number == 374207144686)
                {
                  snprintf(lcd_buffer, 16, "74207144686");
                }
                else if(tag->serial_number == 700628196590)
                {
                  snprintf(lcd_buffer, 16, "700628196590");
                }
                rfidId = true;
                xSemaphoreGive(xSemLcd);
        }
        break;
    }
}

void rfid_init(void)
{
  rc522_config_t config = {
        .spi.host = VSPI_HOST,
        .spi.miso_gpio = 19,
        .spi.mosi_gpio = 23,
        .spi.sck_gpio = 18,
        .spi.sda_gpio = 21,
    };
    rc522_create(&config, &scanner);
    rc522_register_events(scanner, RC522_EVENT_ANY, rc522_handler, NULL);
    rc522_start(scanner);
}

void rfid_task(void *)
{

    while(1)
    {
       // xSemaphoreTake(xSem, portMAX_DELAY);
    }
}

static void log_error_if_nonzero(const char *message, int error_code)
{
    if (error_code != 0) {
        ESP_LOGE(TAG, "Last error %s: 0x%x", message, error_code);
    }
}

static void mqtt_event_handler(void *handler_args, esp_event_base_t base, int32_t event_id, void *event_data)
{
    ESP_LOGD(TAG, "Event dispatched from event loop base=%s, event_id=%ld", base, event_id);
    esp_mqtt_event_handle_t event = event_data;
    esp_mqtt_client_handle_t client = event->client;
    int msg_id;
    switch ((esp_mqtt_event_id_t)event_id) {
    case MQTT_EVENT_CONNECTED:
        MQTT_CONNECTED = true;
        ESP_LOGI(TAG, "MQTT_EVENT_CONNECTED");

        msg_id = esp_mqtt_client_subscribe(client, "/topic/scan-rfid-tag", 0);
        ESP_LOGI("MSG-ID", "sent subscribe successful, msg_id=%d", msg_id);

        /*
        cJSON *root;
        root = cJSON_CreateObject();
        cJSON_AddItemToObject(root, "timestamp", get_timestamp());
        cJSON_AddItemToObject(root, "id", tagSerialNumber);
        msg_id = esp_mqtt_client_publish(client, "/topic/scan-rfid-tag", "root", 0, 1, 0);
        ESP_LOGI(TAG, "sent publish successful, msg_id=%d", msg_id);
        */

        /*
        msg_id = esp_mqtt_client_subscribe(client, "/topic/qos1", 1);
        ESP_LOGI(TAG, "sent subscribe successful, msg_id=%d", msg_id);

        msg_id = esp_mqtt_client_unsubscribe(client, "/topic/qos1");
        ESP_LOGI(TAG, "sent unsubscribe successful, msg_id=%d", msg_id);
        */
        break;
    case MQTT_EVENT_DISCONNECTED:
        MQTT_CONNECTED = false;
        ESP_LOGI(TAG, "MQTT_EVENT_DISCONNECTED");
        break;

    case MQTT_EVENT_SUBSCRIBED:
        ESP_LOGI(TAG, "MQTT_EVENT_SUBSCRIBED, msg_id=%d", event->msg_id);
        msg_id = esp_mqtt_client_publish(client, "/topic/qos0", "data", 0, 0, 0);
        ESP_LOGI(TAG, "sent publish successful, msg_id=%d", msg_id);
        break;
    case MQTT_EVENT_UNSUBSCRIBED:
        ESP_LOGI(TAG, "MQTT_EVENT_UNSUBSCRIBED, msg_id=%d", event->msg_id);
        break;
    case MQTT_EVENT_PUBLISHED:
        /*
        cJSON *root;
        root = cJSON_CreateObject();
        cJSON_AddItemToObject(root, "timestamp", get_timestamp());
        cJSON_AddItemToObject(root, "id", tagSerialNumber);
        printf("JSON DATA TO BE SEND");
        */
        msg_id = esp_mqtt_client_publish(client, "/topic/scan-rfid-tag", "data", 0, 1, 0);
        //ESP_LOGI(TAG, "sent publish successful, msg_id=%d", msg_id);
        ESP_LOGI(TAG, "MQTT_EVENT_PUBLISHED, msg_id=%d", event->msg_id);

        break;
    case MQTT_EVENT_DATA:
        ESP_LOGI(TAG, "MQTT_EVENT_DATA");
        int ret = strncmp(MQTTTOPIC, event->topic, 20);
        printf("ret: %d", ret);

        if (!strncmp(MQTTTOPIC, event->topic, 20))
        {
            printf("ednakvi");
            if(!strncmp(MQTTDATA, event->data, 13))
            {
                printf("data equal");
                scanRfidTag = true;
                xSemaphoreGive(xSemLcd);
            }
        }


        printf("TOPIC='%.*s'\r\n", event->topic_len, event->topic);
        printf("DATA='%.*s'\r\n", event->data_len, event->data);
        /*
        cJSON *root;
        root = cJSON_CreateObject();
        cJSON_AddItemToObject(root, "timestamp", get_timestamp());
        cJSON_AddItemToObject(root, "id", tagSerialNumber);
        printf("JSON DATA TO BE SEND");
        msg_id = esp_mqtt_client_publish(client, "/topic/scan-rfid-tag", root, 0, 1, 0);
        ESP_LOGI(TAG, "sent publish successful, msg_id=%d", msg_id);
        */

        break;
    case MQTT_EVENT_ERROR:
        ESP_LOGI(TAG, "MQTT_EVENT_ERROR");
        if (event->error_handle->error_type == MQTT_ERROR_TYPE_TCP_TRANSPORT) {
            log_error_if_nonzero("reported from esp-tls", event->error_handle->esp_tls_last_esp_err);
            log_error_if_nonzero("reported from tls stack", event->error_handle->esp_tls_stack_err);
            log_error_if_nonzero("captured as transport's socket errno",  event->error_handle->esp_transport_sock_errno);
            ESP_LOGI(TAG, "Last errno string (%s)", strerror(event->error_handle->esp_transport_sock_errno));
        }
        break;
    default:
        ESP_LOGI(TAG, "Other event id:%d", event->event_id);
        break;
    }
}

void mqtt_app_start(void)
{
    esp_mqtt_client_config_t mqtt_cfg = {
        .broker.address.uri = "mqtt://192.168.2.100",
    };
#if CONFIG_BROKER_URL_FROM_STDIN
    char line[128];

    if (strcmp(mqtt_cfg.broker.address.uri, "FROM_STDIN") == 0) {
        int count = 0;
        printf("Please enter url of mqtt broker\n");
        while (count < 128) {
            int c = fgetc(stdin);
            if (c == '\n') {
                line[count] = '\0';
                break;
            } else if (c > 0 && c < 127) {
                line[count] = c;
                ++count;
            }
            vTaskDelay(10 / portTICK_PERIOD_MS);
        }
        mqtt_cfg.broker.address.uri = line;
        printf("Broker url: %s\n", line);
    } else {
        ESP_LOGE(TAG, "Configuration mismatch: wrong broker url");
        abort();
    }
#endif /* CONFIG_BROKER_URL_FROM_STDIN */

    esp_mqtt_client_handle_t client = esp_mqtt_client_init(&mqtt_cfg);
    /* The last argument may be used to pass data to the event handler, in this example mqtt_event_handler */
    esp_mqtt_client_register_event(client, ESP_EVENT_ANY_ID, mqtt_event_handler, NULL);
    esp_mqtt_client_start(client);
}

/*
void Publisher_Task(void *params)
{
  while (true)
  {
    if(MQTT_CONNEECTED)
    {
        cJSON *root;
        root = cJSON_CreateObject();
        cJSON_AddItemToObject(root, "timestamp", get_timestamp());
        cJSON_AddItemToObject(root, "id", tagSerialNumber);
        printf("JSON DATA TO BE SEND");
        msg_id = esp_mqtt_client_publish(client, "/topic/scan-rfid-tag", root, 0, 1, 0);
        ESP_LOGI(TAG, "sent publish successful, msg_id=%d", msg_id);
        //ESP_LOGI(TAG, "MQTT_EVENT_PUBLISHED, msg_id=%d", event->msg_id);
    }
  }
}
*/
